% layout 'default';
% title 'Messages';

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold text-gray-900">Messages</h1>
        % if ($unread_count > 0) {
            <span class="bg-red-500 text-white px-3 py-1 rounded-full text-sm font-medium">
                <%= $unread_count %> unread
            </span>
        % }
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 mb-6">
        <div class="flex flex-wrap gap-4 items-center">
            <div>
                <label for="type-filter" class="block text-sm font-medium text-gray-700 mb-1">Type</label>
                <select id="type-filter" name="type" class="rounded-md border-gray-300 shadow-sm">
                    <option value="">All Types</option>
                    <option value="announcement" <%= param('type') && param('type') eq 'announcement' ? 'selected' : '' %>>Announcements</option>
                    <option value="update" <%= param('type') && param('type') eq 'update' ? 'selected' : '' %>>Updates</option>
                    <option value="emergency" <%= param('type') && param('type') eq 'emergency' ? 'selected' : '' %>>Emergency</option>
                </select>
            </div>
            <div>
                <label for="unread-filter" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <select id="unread-filter" name="unread" class="rounded-md border-gray-300 shadow-sm">
                    <option value="">All Messages</option>
                    <option value="1" <%= param('unread') ? 'selected' : '' %>>Unread Only</option>
                </select>
            </div>
            <div class="mt-6">
                <button id="apply-filters" class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                    Apply Filters
                </button>
            </div>
        </div>
    </div>

    <!-- Messages List -->
    <div class="space-y-4">
        % if (@$messages) {
            % for my $message (@$messages) {
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 <%= !$message->{read_at} ? 'border-l-4 border-l-blue-500' : '' %>">
                    <div class="flex items-start justify-between">
                        <div class="flex-1">
                            <div class="flex items-center gap-3 mb-2">
                                % if ($message->{message_type} eq 'emergency') {
                                    <span class="bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium">
                                        🚨 Emergency
                                    </span>
                                % } elsif ($message->{message_type} eq 'announcement') {
                                    <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium">
                                        📢 Announcement
                                    </span>
                                % } elsif ($message->{message_type} eq 'update') {
                                    <span class="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                                        📝 Update
                                    </span>
                                % }
                                <span class="text-sm text-gray-500"><%= $message->{scope_name} %></span>
                                % if (!$message->{read_at}) {
                                    <span class="w-2 h-2 bg-blue-500 rounded-full"></span>
                                % }
                            </div>
                            
                            <h3 class="text-lg font-semibold text-gray-900 mb-2">
                                <a href="/messages/<%= $message->{id} %>" 
                                   class="hover:text-blue-600 message-link"
                                   data-message-id="<%= $message->{id} %>">
                                    <%= $message->{subject} %>
                                </a>
                            </h3>
                            
                            <p class="text-gray-600 mb-3 line-clamp-2">
                                <%= substr($message->{body}, 0, 150) %><%= length($message->{body}) > 150 ? '...' : '' %>
                            </p>
                            
                            <div class="flex items-center text-sm text-gray-500">
                                <span>From: <%= $message->{sender_name} || 'System' %></span>
                                <span class="mx-2">•</span>
                                <span><%= $message->{sent_at} ? DateTime->from_epoch(epoch => $message->{sent_at})->strftime('%b %d, %Y at %I:%M %p') : 'Scheduled' %></span>
                            </div>
                        </div>
                        
                        <div class="ml-4">
                            % if (!$message->{read_at}) {
                                <button class="mark-read-btn text-blue-600 hover:text-blue-800 text-sm font-medium"
                                        data-message-id="<%= $message->{id} %>">
                                    Mark as Read
                                </button>
                            % }
                        </div>
                    </div>
                </div>
            % }
        % } else {
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-12 text-center">
                <div class="text-gray-400 mb-4">
                    <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2 2v-5m16 0h-5.5l-3.5 3.5L7 16H4" />
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 mb-2">No messages</h3>
                <p class="text-gray-500">You don't have any messages yet.</p>
            </div>
        % }
    </div>
    
    <!-- Pagination -->
    % if ($total_pages > 1) {
        <div class="mt-8 flex justify-center">
            <nav class="flex space-x-1">
                % if ($current_page > 1) {
                    <a href="?page=<%= $current_page - 1 %><%= param('type') ? '&type=' . param('type') : '' %><%= param('unread') ? '&unread=1' : '' %>" 
                       class="px-3 py-2 rounded-md bg-white border border-gray-300 text-gray-700 hover:bg-gray-50">
                        Previous
                    </a>
                % }
                
                % for my $page (1..$total_pages) {
                    % if ($page == $current_page) {
                        <span class="px-3 py-2 rounded-md bg-blue-600 text-white font-medium">
                            <%= $page %>
                        </span>
                    % } else {
                        <a href="?page=<%= $page %><%= param('type') ? '&type=' . param('type') : '' %><%= param('unread') ? '&unread=1' : '' %>" 
                           class="px-3 py-2 rounded-md bg-white border border-gray-300 text-gray-700 hover:bg-gray-50">
                            <%= $page %>
                        </a>
                    % }
                % }
                
                % if ($current_page < $total_pages) {
                    <a href="?page=<%= $current_page + 1 %><%= param('type') ? '&type=' . param('type') : '' %><%= param('unread') ? '&unread=1' : '' %>" 
                       class="px-3 py-2 rounded-md bg-white border border-gray-300 text-gray-700 hover:bg-gray-50">
                        Next
                    </a>
                % }
            </nav>
        </div>
    % }
</div>

<script>
// Filter functionality
document.getElementById('apply-filters').addEventListener('click', function() {
    const type = document.getElementById('type-filter').value;
    const unread = document.getElementById('unread-filter').value;
    
    let url = new URL(window.location);
    url.searchParams.delete('page'); // Reset to first page
    
    if (type) {
        url.searchParams.set('type', type);
    } else {
        url.searchParams.delete('type');
    }
    
    if (unread) {
        url.searchParams.set('unread', unread);
    } else {
        url.searchParams.delete('unread');
    }
    
    window.location.href = url.toString();
});

// Mark as read functionality
document.querySelectorAll('.mark-read-btn').forEach(button => {
    button.addEventListener('click', async function(e) {
        e.preventDefault();
        const messageId = this.dataset.messageId;
        
        try {
            const response = await fetch(`/messages/${messageId}/mark_read`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            if (response.ok) {
                // Remove the unread indicator and button
                this.remove();
                const messageCard = this.closest('.border-l-4');
                if (messageCard) {
                    messageCard.classList.remove('border-l-4', 'border-l-blue-500');
                }
                
                // Update unread count
                const unreadBadge = document.querySelector('.bg-red-500');
                if (unreadBadge) {
                    const currentCount = parseInt(unreadBadge.textContent.split(' ')[0]);
                    if (currentCount > 1) {
                        unreadBadge.textContent = `${currentCount - 1} unread`;
                    } else {
                        unreadBadge.remove();
                    }
                }
            }
        } catch (error) {
            console.error('Failed to mark message as read:', error);
        }
    });
});

// Auto-mark as read when clicking message link
document.querySelectorAll('.message-link').forEach(link => {
    link.addEventListener('click', async function(e) {
        const messageId = this.dataset.messageId;
        const isUnread = this.closest('.border-l-4');
        
        if (isUnread) {
            try {
                await fetch(`/messages/${messageId}/mark_read`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });
            } catch (error) {
                console.error('Failed to mark message as read:', error);
            }
        }
    });
});
</script>