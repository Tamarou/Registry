<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title><%= title // 'Teacher Dashboard' %> - Registry</title>

    <!-- Design System CSS -->
    <link rel="stylesheet" href="/css/design-system.css">
    <link rel="stylesheet" href="/css/components.css">
    <link rel="stylesheet" href="/css/style.css">

    <!-- HTMX for dynamic interactions -->
    <script src="https://unpkg.com/htmx.org@1.8.4"></script>

    <!-- Modern Web Components support check -->
    <script>
        // Check for Web Components support
        if (!('customElements' in window)) {
            console.warn('Web Components not supported. Loading polyfill...');
            // In production, you might want to load a polyfill here
        }
    </script>
</head>
<body class="teacher-layout" data-theme="light">
    <div class="teacher-container">
        <article class="teacher-card">
            <header class="teacher-header">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h1><%= title // 'Teacher Dashboard' %></h1>
                    <button class="theme-toggle" onclick="toggleTheme()" aria-label="Toggle theme" style="background: rgba(255,255,255,0.2); border: 2px solid white; color: white;">
                        <span id="theme-icon">üåô</span>
                    </button>
                </div>
            </header>
            <main class="teacher-content">
                <%= content %>
                <section class="loading hidden">
                    <div class="spinner"></div>
                </section>
            </main>
        </article>
    </div>

    <script>
        // Show loading spinner during HTMX requests
        document.body.addEventListener('htmx:beforeRequest', function(evt) {
            const loading = document.querySelector('.loading');
            if (loading) loading.style.display = 'block';
        });

        document.body.addEventListener('htmx:afterRequest', function(evt) {
            const loading = document.querySelector('.loading');
            if (loading) loading.style.display = 'none';
        });

        // Theme toggle functionality
        function toggleTheme() {
            const body = document.body;
            const currentTheme = body.getAttribute('data-theme');
            const newTheme = currentTheme === 'light' ? 'dark' : 'light';
            const icon = document.getElementById('theme-icon');

            body.setAttribute('data-theme', newTheme);
            icon.textContent = newTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';

            // Save preference
            localStorage.setItem('theme', newTheme);
        }

        // Load theme preference (system preference or saved override)
        window.addEventListener('DOMContentLoaded', function() {
            // Check if user has manually set a preference, otherwise use system preference
            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const theme = savedTheme || (systemPrefersDark ? 'dark' : 'light');

            document.body.setAttribute('data-theme', theme);
            document.getElementById('theme-icon').textContent = theme === 'light' ? 'üåô' : '‚òÄÔ∏è';

            // Listen for system theme changes (only if user hasn't manually set a preference)
            window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function(e) {
                if (!localStorage.getItem('theme')) {
                    const newTheme = e.matches ? 'dark' : 'light';
                    document.body.setAttribute('data-theme', newTheme);
                    document.getElementById('theme-icon').textContent = newTheme === 'light' ? 'üåô' : '‚òÄÔ∏è';
                }
            });
        });
    </script>
</body>
</html>
